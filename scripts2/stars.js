const COLOR="white";const MAX=9;const random={uniform: (min, max)=> Math.random() * (max - min) + min,};class Vec{constructor(...components){this.components=components;}add(vec){this.components=this.components.map((c, i)=> c + vec.components[i]); return this;}sub(vec){this.components=this.components.map((c, i)=> c - vec.components[i]); return this;}div(vec){this.components=this.components.map((c, i)=> c / vec.components[i]); return this;}scale(scalar){this.components=this.components.map((c)=> c * scalar); return this;}multiply(vec){this.components=this.components.map((c, i)=> c * vec.components[i]); return this;}rotateXY(angle){const x=this.components[0] * Math.cos(angle) - this.components[1] * Math.sin(angle); const y=this.components[0] * Math.sin(angle) + this.components[1] * Math.cos(angle); this.components[0]=x; this.components[1]=y;}}/*Thank you Jony Hayama for the inspiration*/const CENTER=new Vec(window.innerWidth / 2, window.innerHeight / 2);const STARS=1500;class Canvas{constructor(id){this.canvas=document.createElement("canvas"); this.canvas.id=id; this.canvas.width=window.innerWidth; this.canvas.height=window.innerHeight; document.body.appendChild(this.canvas); this.ctx=this.canvas.getContext("2d");}draw(){const space=new Space(); const draw=()=>{this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); space.run(this.ctx); requestAnimationFrame(draw);}; draw();}}class Star{constructor(){this.size=10; this.pos=this.getPosition(); this.screenPos=new Vec(0, 0); this.vel=random.uniform(0.05, 0.25); this.color=COLOR;}getPosition(scale=35){const angle=random.uniform(0, 2 * Math.PI); const radius=random.uniform(window.innerHeight / scale, window.innerHeight) * scale; const x=Math.cos(angle) * radius; const y=Math.sin(angle) * radius; return new Vec(x, y, MAX);}update(){this.pos.components[2] -=this.vel; this.pos=this.pos.components[2] < 1 ? this.getPosition() : this.pos; this.screenPos=new Vec(this.pos.components[0], this.pos.components[1]) .div(new Vec(this.pos.components[2], this.pos.components[2])) .add(CENTER); this.size=(0.3 * (MAX - this.pos.components[2])) / (this.pos.components[2] * 0.2); this.pos.rotateXY(0.003);}draw(ctx){ctx.fillStyle=this.color; ctx.beginPath(); ctx.rect( this.screenPos.components[0], this.screenPos.components[1], this.size, this.size ); ctx.closePath(); ctx.fill();}}class Space{constructor(){this.stars=new Array(STARS).fill(null).map(()=> new Star());}update(){this.stars.forEach((star)=> star.update());}draw(ctx){this.stars.forEach((star)=> star.draw(ctx));}run(ctx){this.update(); this.stars.sort((a, b)=> b.pos.components[2] - a.pos.components[2]); this.draw(ctx);}}const canvas=new Canvas("canvas");canvas.draw();
